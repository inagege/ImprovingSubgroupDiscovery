import math

import numpy as np


# http://www.sfu.ca/~ssurjano/oakoh04.html
def calculate_y_oakley_ohagan2004(xx):
    a1 = np.array([0.0118, 0.0456, 0.2297, 0.0393, 0.1177, 0.3865, 0.3897, 0.6061,
                   0.6159, 0.4005, 1.0741, 1.1474, 0.7880, 1.1242, 1.1982])
    a2 = np.array([0.4341, 0.0887, 0.0512, 0.3233, 0.1489, 1.0360, 0.9892, 0.9672,
                   0.8977, 0.8083, 1.8426, 2.4712, 2.3946, 2.0045, 2.2621])
    a3 = np.array([0.1044, 0.2057, 0.0774, 0.2730, 0.1253, 0.7526, 0.8570, 1.0331,
                   0.8388, 0.7970, 2.2145, 2.0382, 2.4004, 2.0541, 1.9845])

    matrix = np.array([[-0.022482886, -0.18501666, 0.13418263, 0.36867264, 0.17172785, 0.13651143, -0.44034404,
                        -0.081422854, 0.71321025, -0.44361072, 0.50383394, -0.024101458, -0.045939684, 0.21666181,
                        0.055887417],
                       [0.25659630, 0.053792287, 0.25800381, 0.23795905, -0.59125756, -0.081627077, -0.28749073,
                        0.41581639, 0.49752241, 0.083893165, -0.11056683, 0.033222351, -0.13979497, -0.031020556,
                        -0.22318721],
                       [-0.055999811, 0.19542252, 0.095529005, -0.28626530, -0.14441303, 0.22369356, 0.14527412,
                        0.28998481, 0.23105010, -0.31929879, -0.29039128, -0.20956898, 0.43139047, 0.024429152,
                        0.044904409],
                       [0.66448103, 0.43069872, 0.29924645, -0.16202441, -0.31479544, -0.39026802, 0.17679822,
                        0.057952663, 0.17230342, 0.13466011, -0.35275240, 0.25146896, -0.018810529, 0.36482392,
                        -0.32504618],
                       [-0.12127800, 0.12463327, 0.10656519, 0.046562296, -0.21678617, 0.19492172, -0.065521126,
                        0.024404669, -0.096828860, 0.19366196, 0.33354757, 0.31295994, -0.083615456, -0.25342082,
                        0.37325717],
                       [-0.28376230, -0.32820154, -0.10496068, -0.22073452, -0.13708154, -0.14426375, -0.11503319,
                        0.22424151, -0.030395022, -0.51505615, 0.017254978, 0.038957118, 0.36069184, 0.30902452,
                        0.050030193],
                       [-0.077875893, 0.0037456560, 0.88685604, -0.26590028, -0.079325357, -0.042734919,
                        -0.18653782, -0.35604718, -0.17497421, 0.088699956, 0.40025886, -0.055979693, 0.13724479,
                        0.21485613, -0.011265799],
                       [-0.092294730, 0.59209563, 0.031338285, -0.033080861, -0.24308858, -0.099798547, 0.034460195,
                        0.095119813, -0.33801620, 0.0063860024, -0.61207299, 0.081325416, 0.88683114, 0.14254905,
                        0.14776204],
                       [-0.13189434, 0.52878496, 0.12652391, 0.045113625, 0.58373514, 0.37291503, 0.11395325,
                        -0.29479222, -0.57014085, 0.46291592, -0.094050179, 0.13959097, -0.38607402, -0.44897060,
                        -0.14602419],
                       [0.058107658, -0.32289338, 0.093139162, 0.072427234, -0.56919401, 0.52554237, 0.23656926,
                        -0.011782016, 0.071820601, 0.078277291, -0.13355752, 0.22722721, 0.14369455, -0.45198935,
                        -0.55574794],
                       [0.66145875, 0.34633299, 0.14098019, 0.51882591, -0.28019898, -0.16032260, -0.068413337,
                        -0.20428242, 0.069672173, 0.23112577, -0.044368579, -0.16455425, 0.21620977, 0.0042702105,
                        -0.087399014],
                       [0.31599556, -0.027551859, 0.13434254, 0.13497371, 0.054005680, -0.17374789, 0.17525393,
                        0.060258929, -0.17914162, -0.31056619, -0.25358691, 0.025847535, -0.43006001, -0.62266361,
                        -0.033996882],
                       [-0.29038151, 0.034101270, 0.034903413, -0.12121764, 0.026030714, -0.33546274, -0.41424111,
                        0.053248380, -0.27099455, -0.026251302, 0.41024137, 0.26636349, 0.15582891, -0.18666254,
                        0.019895831],
                       [-0.24388652, -0.44098852, 0.012618825, 0.24945112, 0.071101888, 0.24623792, 0.17484502,
                        0.0085286769, 0.25147070, -0.14659862, -0.084625150, 0.36931333, -0.29955293, 0.11044360,
                        -0.75690139],
                       [0.041494323, -0.25980564, 0.46402128, -0.36112127, -0.94980789, -0.16504063, 0.0030943325,
                        0.052792942, 0.22523648, 0.38390366, 0.45562427, -0.18631744, 0.0082333995, 0.16670803,
                        0.16045688]])
    matrix = np.reshape(matrix, (15, 15), order='F')  # Reshape M to a 15x15 matrix in Fortran order

    term1 = np.dot(a1, xx)
    term2 = np.dot(a2, np.sin(xx))
    term3 = np.dot(a3, np.cos(xx))
    term4 = np.dot(xx.T, np.dot(matrix, xx))

    y = term1 + term2 + term3 + term4

    return y.item()


def calculate_y_morris(x, k1=2):
    alpha = np.sqrt(12) - 6 * np.sqrt(0.1) * np.sqrt(k1 - 1)
    beta = 12 * np.sqrt(0.1) / np.sqrt(k1 - 1)

    sum1 = np.sum(x[:k1])
    term1 = alpha * sum1

    sum2 = 0
    for ii in range(1, k1):
        for jj in range(ii + 1, k1 + 1):
            sum2 += x[ii - 1] * x[jj - 1]

    term2 = beta * sum2

    y = term1 + term2
    return y


def calculate_y_moon2010(x):
    coefflin = np.array([-2.08, 2.11, 0.76, -0.57, -0.72, -0.47, 0.39, 1.40, -0.09, -0.70, -1.27, -1.03, 1.07, 2.23,
                         2.46, -1.31, -2.94, 2.63, 0.07, 2.44])

    sumdeg1 = np.sum(coefflin * x)

    coeffs = np.array([[1.42, 2.18, 0.58, -1.21, -7.15, -1.29, -0.19, -2.75, -1.16, -1.09, 0.89, -0.16, 4.43, 1.65,
                        -1.25, -1.35, 1.15, -19.71, 23.72, 1.42],
                       [0, -1.70, 0.84, 1.20, -2.35, -0.16, -0.19, -5.93, -1.15, 1.89, -3.47, -0.07, -0.60, -1.09,
                        -3.23, 0.44, 1.24, 2.13, -0.71, 1.64],
                       [0, 0, 1.00, -0.49, 1.74, 1.29, -0.35, -4.73, 3.27, 1.87, 1.42, -0.96, -0.91, 2.06, 2.89, 0.25,
                        1.97, 3.04, 2.00, 1.64],
                       [0, 0, 0, -3.23, 2.75, -1.40, 0.24, -0.70, -0.17, -3.38, -1.87, -0.17, 1.56, 2.40, -1.70, 0.32,
                        2.11, -0.20, 1.39, -2.01],
                       [0, 0, 0, 0, -1.10, 2.34, -3.90, -0.80, 0.13, -3.97, 1.99, 0.45, 1.77, -0.50, 1.86, 0.02, -2.08,
                        -1.78, 1.76, 1.30],
                       [0, 0, 0, 0, 0, 0.21, -0.03, -0.37, -1.27, 2.78, 1.37, -2.75, -3.15, 1.86, 0.12, -0.74, 1.06,
                        -3.76, -0.43, 1.25],
                       [0, 0, 0, 0, 0, 0, -4.16, 0.26, -0.30, -2.69, -2.56, 28.99, -2.13, 1.36, 1.45, 3.09, -1.73,
                        -1.66, -3.94, -2.56],
                       [0, 0, 0, 0, 0, 0, 0, -1.00, 0.77, 1.09, -1.15, -1.09, -2.74, 1.59, 1.41, 0.48, 2.16, 0.34, 4.17,
                        0.73],
                       [0, 0, 0, 0, 0, 0, 0, 0, 3.06, 2.46, 5.80, -5.15, -2.05, 3.17, 3.40, -0.49, -6.71, -0.74, 2.78,
                        -0.41],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 3.34, 2.36, -1.77, -3.16, 1.89, 2.20, -0.71, -3.78, 0.98, 1.40,
                        -0.59],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.17, -2.45, 6.04, 3.22, 0.19, -0.03, -2.65, -1.02, -1.96,
                        -2.66],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.52, 1.36, -0.59, -1.05, -0.84, -1.30, 0.42, 1.86, -0.32],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.42, -0.50, 0.21, -0.18, 3.04, -0.53, -0.12, 0.09],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.13, -2.42, -3.93, -2.30, 0.40, 0.81, -1.10],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.26, 5.31, 1.66, -3.10, 3.37, 4.32],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.26, 0.00, -0.77, -3.90, -1.08],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.62, -1.06, -0.86, 0.44],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.35, -1.99, 1.50],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13.34, 1.34],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.38]])

    xmat = np.tile(x, (20, 1))
    factors = np.sum(coeffs * xmat * xmat.T, axis=1)
    sumdeg2 = np.sum(factors)

    y = sumdeg1 + sumdeg2
    return y


def calculate_y_sobol_levitan1999(x, b=None, c0=0):
    d = len(x)

    if b is None:
        if d <= 20:
            b = np.array([2, 1.95, 1.9, 1.85, 1.8, 1.75, 1.7, 1.65, 0.4228, 0.3077, 0.2169, 0.1471, 0.0951, 0.0577,
                          0.0323, 0.0161, 0.0068, 0.0021, 0.0004, 0.00000000001])
        else:
            raise ValueError('Value of the d-dimensional vector b is required.')

    id = 1
    for bi in b:
        new = (np.exp(bi) - 1) / bi
        id *= new

    summation = 0
    for i in range(d):
        bi = b[i]
        xi = x[i]
        summation += bi * xi

    y = np.exp(summation) - id + c0
    return y


def calculate_y_welch(x):
    x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20 = x

    term1 = 5 * x12 / (1 + x1)
    term2 = 5 * (x4 - x20) ** 2
    term3 = x5 + 40 * x19 ** 3 - 5 * x19
    term4 = 0.05 * x2 + 0.08 * x3 - 0.03 * x6
    term5 = 0.03 * x7 - 0.09 * x9 - 0.01 * x10
    term6 = -0.07 * x11 + 0.25 * x13 ** 2 - 0.04 * x14
    term7 = 0.06 * x15 - 0.01 * x17 - 0.03 * x18

    y = term1 + term2 + term3 + term4 + term5 + term6 + term7

    return y


def calculate_y_loeppky(x):

    x1, x2, x3, x4, x5, x6, x7 = x

    term1 = 6 * x1 + 4 * x2
    term2 = 5.5 * x3 + 3 * x1 * x2
    term3 = 2.2 * x1 * x3 + 1.4 * x2 * x3
    term4 = x4 + 0.5 * x5
    term5 = 0.2 * x6 + 0.1 * x7

    y = term1 + term2 + term3 + term4 + term5
    return y


def calculate_y_borehole(x):
    rw, r, tu, hu, tl, hl, l, kw = x

    frac1 = 2 * math.pi * tu * (hu - hl)

    frac2a = 2 * l * tu / (math.log(r / rw) * rw ** 2 * kw)
    frac2b = tu / tl
    frac2 = math.log(r / rw) * (1 + frac2a + frac2b)

    y = frac1 / frac2
    return y
